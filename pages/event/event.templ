package event

import (
	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/models"
	"log/slog"
)

type EventState struct {
	Event     models.Event `json:"event"`
	IsEditing bool         `json:"isEditing"`
}

templ EventView(state *EventState, id int, db *sql.DB, logger *slog.Logger) {
	<div id="events-container">
		<div class="events-grid"></div>
		@EventCard(state.Event, state.IsEditing)
		<code>
			<pre data-text="ctx.signals.JSON()"></pre>
		</code>
	</div>
}

func GetEvent(db *sql.DB, id int, logger *slog.Logger) (models.Event, error) {
	query := `
        SELECT
            id,
            suggested_event_id,
            title,
            description,
            image_url,
            system,
            host_name,
            host,
            room_name,
            pulje_name,
            max_players,
            child_friendly,
            adults_only,
            beginner_friendly,
            experienced_only,
            can_be_run_in_english,
            long_running,
            short_running,
            inserted_time
        FROM events
        WHERE id = ?
    `

	var event models.Event

	row := db.QueryRow(query, id)

	err := row.Scan(
		&event.ID,
		&event.SuggestedEventID,
		&event.Title,
		&event.Description,
		&event.ImageURL,
		&event.System,
		&event.HostName,
		&event.Host,
		&event.RoomName,
		&event.PuljeName,
		&event.MaxPlayers,
		&event.ChildFriendly,
		&event.AdultsOnly,
		&event.BeginnerFriendly,
		&event.ExperiencedOnly,
		&event.CanBeRunInEnglish,
		&event.LongRunning,
		&event.ShortRunning,
		&event.InsertedTime,
	)
	if err != nil {
		if err == sql.ErrNoRows {
			logger.Warn("No event found for given ID", "id", id)
			return models.Event{}, nil
		}

		logger.Error("Error fetching event", "err", err, "id", id)
		return models.Event{}, err
	}

	logger.Info("Fetched event successfully", "event", event)
	return event, nil
}

templ EventCard(event models.Event, isEditing bool) {
	@eventCss()
	<div style="display: flex; place-content: space-between; margin-inline: 1rem; margin-block-end: 1rem;">
		@components.BackButton()
		@components.EditButton(event.ID, isEditing)
	</div>
	<label
		class="card"
		data-signals={ fmt.Sprintf("{title: '%s', host_name: '%s', system: '%s', description: '%s'}",
			event.Title,
			event.HostName,
			event.System,
			event.Description,
		) }
	>
		<div class="card-header">
			<img
				src="/static/images/events/dice-small.webp"
				alt="Event illustration"
				class="card-image"
			/>
			if (isEditing) {
				<input
					data-bind-title
					type="text"
					class="card-title"
					placeholder="Enter a title"
					value={ event.Title }
				/>
			} else {
				<h1 class="card-title">{ event.Title }</h1>
			}
		</div>
		<div class="card-content">
			<div class="card-grid">
				<div class="card-field">
					<span class="field-label">Game Master</span>
					if (isEditing) {
						<input
							data-bind="host_name"
							type="text"
							class="field-value"
							placeholder="Enter a game master"
							value={ event.HostName }
						/>
					} else {
						<p class="field-value">{ event.HostName }</p>
					}
				</div>
				<div class="card-field">
					<span class="field-label">System</span>
					if (isEditing) {
						<input
							data-bind-system
							type="text"
							class="field-value"
							placeholder="Enter a system"
							value={ event.System }
						/>
					} else {
						<p class="field-value">{ event.System }</p>
					}
				</div>
			</div>
			<div class="card-field">
				<span class="field-label">Description</span>
				if (isEditing) {
					<textarea
						data-bind="description"
						class="field-value"
						rows="4"
						cols="50"
						placeholder="Enter a description"
					>{ event.Description }</textarea>
				} else {
					<p class="field-value">{ event.Description }</p>
				}
			</div>
		</div>
	</label>
	if (isEditing) {
		@components.EditEvent(event)
	}
}
