// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package event

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/models"
	"log/slog"
)

type EventState struct {
	Event     models.Event `json:"event"`
	Idx       int          `json:"editingIdx"`
	IsEditing bool         `json:"isEditing"`
}

func EventMvcView(state *EventState, db *sql.DB, logger *slog.Logger) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"events-container\"><div class=\"events-grid\"></div><code><pre data-text=\"ctx.signals.JSON()\"></pre></code></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func GetEvent(db *sql.DB, id int, logger *slog.Logger) (models.Event, error) {
	query := fmt.Sprintf("SELECT id, title, short_description, game_master, system FROM events where id = %d", id)
	fmt.Println(query, "in query")
	rows, err := db.Query(query)
	if err != nil {
		logger.Error("Error fetching events", "err", err)
		return models.Event{}, err
	}
	defer rows.Close()

	var event models.Event
	for rows.Next() {
		var mappedEvent models.Event
		if err := rows.Scan(&mappedEvent.ID, &mappedEvent.Title, &mappedEvent.ShortDescription, &mappedEvent.GameMaster, &mappedEvent.System); err != nil {
			logger.Error("Error mapping event", "err", err)
			return models.Event{}, err
		}
		fmt.Printf("mapped event: %+v\n", event)
		event = mappedEvent
	}
	fmt.Printf("Fetched event: %+v\n", event)
	return event, nil
}

var _ = templruntime.GeneratedTemplate
