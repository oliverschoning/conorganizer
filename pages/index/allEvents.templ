package index

import (
	"database/sql"
	"github.com/Regncon/conorganizer/models"
	"github.com/Regncon/conorganizer/pages/root"
	"log/slog"
)

type EventState struct {
	Events    []models.Event `json:"events"`
	Idx       int            `json:"editingIdx"`
	IsEditing bool           `json:"isEditing"`
}

templ EventsView(state *EventState, db *sql.DB, logger *slog.Logger) {
	<div id="events-container">
		<div class="events-grid">
			@ShowEvents(state, state.Events, db, logger)
		</div>
		<code>
			<pre data-text="ctx.signals.JSON()"></pre>
		</code>
	</div>
}

templ ShowEvents(state *EventState, events []models.Event, db *sql.DB, logger *slog.Logger) {
	for _, event := range events {
		@root.EventCard(event, state.Idx)
	}
}

func getEvents(db *sql.DB, logger *slog.Logger) ([]models.Event, error) {
	query := `
		SELECT
			id,
			suggested_event_id,
			title,
			description,
			image_url,
			system,
			host_name,
			host,
			room_name,
			pulje_name,
			max_players,
			child_friendly,
			adults_only,
			beginner_friendly,
			experienced_only,
			can_be_run_in_english,
			long_running,
			short_running,
			inserted_time
		FROM events
	`
	rows, err := db.Query(query)
	if err != nil {
		logger.Error("Error fetching events", "err", err)
		return nil, err
	}
	defer rows.Close()

	var events []models.Event
	for rows.Next() {
		var event models.Event
		err := rows.Scan(
			&event.ID,
			&event.SuggestedEventID,
			&event.Title,
			&event.Description,
			&event.ImageURL,
			&event.System,
			&event.HostName,
			&event.Host,
			&event.RoomName,
			&event.PuljeName,
			&event.MaxPlayers,
			&event.ChildFriendly,
			&event.AdultsOnly,
			&event.BeginnerFriendly,
			&event.ExperiencedOnly,
			&event.CanBeRunInEnglish,
			&event.LongRunning,
			&event.ShortRunning,
			&event.InsertedTime,
		)
		if err != nil {
			logger.Error("Error fetching events", "err", err)
			return nil, err
		}
		events = append(events, event)
	}
	if err := rows.Err(); err != nil {
		logger.Error("Error iterating over events", "err", err)
		return nil, err
	}
	return events, nil
}
