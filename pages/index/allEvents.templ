package index

import (
	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/models"
	"github.com/Regncon/conorganizer/pages/root"
	"log/slog"
)

type EventMVC struct {
	Events     []models.Event `json:"event"`
	EditingIdx int            `json:"editingIdx"`
}

templ AllEventMVCView(mvc *EventMVC, db *sql.DB, logger *slog.Logger) {
	{{ events, err := root.GetEvents(db, logger) }}
	<div id="events-container">
		if err != nil {
			<p>Error fetching events: { err.Error() }</p>
			return
		}
		<div class="events-grid">
			@ShowEvents(mvc, events, db, logger)
		</div>
		<code>
			<pre data-text="ctx.signals.JSON()"></pre>
		</code>
	</div>
}

templ ShowEvents(mvc *EventMVC, events []models.Event, db *sql.DB, logger *slog.Logger) {
	{{ fmt.Println("EditingIdx: ", mvc.EditingIdx, mvc.EditingIdx == -1) }}
	if (mvc.EditingIdx == -1) {
		for _, event := range events {
			@root.EventCard(event, mvc.EditingIdx)
		}
	} else {
		{{ event, err := GetEvent(db, mvc.EditingIdx, logger) }}
		if err != nil {
			<p>Error fetching events: { err.Error() }</p>
			return
		}
		@SingleEvent(event)
	}
}

templ SingleEvent(event models.Event) {
	<style>
		.events-grid {
			--events-grid: 1fr;
		}
		.back-btn {
			width: 100%;
		}
		/* Reset and base styles */
		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
		}
		/* Card styles */
		.card {
			border-radius: 0.5rem;
			box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
			width: 100%;
			max-width: 48rem;
			overflow: hidden;
			cursor: pointer;
		}

		.card-header {
			position: relative;
			height: 16rem;
		}

		.card-image {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

		.card-title {
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			color: white;
			font-size: 3.5rem;
			font-weight: bold;
			text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
		}

		.card-content {
			padding: 1.5rem;
			background-color: #21273d;
		}

		.card-grid {
			display: grid;
			grid-template-columns: repeat(2, 1fr);
			gap: 1.5rem;
			margin-bottom: 1.5rem;
		}

		.card-field {
			display: flex;
			flex-direction: column;
			gap: 0.5rem;
		}

		.field-label {
			color: #a9b4ca;
			font-size: 0.875rem;
			font-weight: 500;
		}

		.field-value {
			font-size: 1.125rem;
			font-weight: 500;
		}

		/* Modal styles */
		.modal {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.5);
			display: none;
			place-items: center;
			padding: 1rem;
		}

		.modal-content {
			background: white;
			padding: 2rem;
			border-radius: 0.5rem;
			width: 100%;
			max-width: 36rem;
			position: relative;
		}

		.modal-close {
			position: absolute;
			top: 1rem;
			right: 1rem;
			background: none;
			border: none;
			font-size: 1.5rem;
			cursor: pointer;
			color: #6b7280;
		}

		/* Modal toggle functionality */
		#modal-toggle {
			display: none;
		}

		#modal-toggle:checked + .modal {
			display: grid;
		}

		/* Responsive adjustments */
		@media (max-width: 640px) {
			.card-grid {
				grid-template-columns: 1fr;
			}

			.card-title {
				font-size: 2.5rem;
			}
		}
	</style>
	<!-- Card -->
	<label class="card">
		@components.BackButton()
		<div class="card-header">
			<img
				src="/static/images/events/dice-small.webp"
				alt="Colorful dice collection"
				class="card-image"
			/>
			<h1 class="card-title">{ event.Title }</h1>
		</div>
		<div class="card-content">
			<div class="card-grid">
				<div class="card-field">
					<span class="field-label">Game Master</span>
					<span class="field-value">{ event.GameMaster }</span>
				</div>
				<div class="card-field">
					<span class="field-label">System</span>
					<span class="field-value">{ event.System }</span>
				</div>
			</div>
			<div class="card-field">
				<span class="field-label">Description</span>
				<span class="field-value">{ event.ShortDescription }</span>
			</div>
		</div>
	</label>
}
