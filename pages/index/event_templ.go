// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package index

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"database/sql"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/models"
	"github.com/Regncon/conorganizer/pages/root"
	"strconv"
)

type EventViewMode int

const (
	TodoViewModeAll EventViewMode = iota
	TodoViewModeActive
	TodoViewModeCompleted
	TodoViewModeLast
)

var TodoViewModeStrings = []string{"All", "Active", "Completed"}

type Event struct {
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

type EventMVC struct {
	Todos      []*Event      `json:"todos"`
	EditingIdx int           `json:"editingIdx"`
	Mode       EventViewMode `json:"mode"`
}

func EventMVCView(mvc *EventMVC, db *sql.DB) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		events, err := root.GetEvents(db)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"events-container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if err != nil {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<p>Error fetching events: ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(err.Error())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/index/event.templ`, Line: 37, Col: 42}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</p>return")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(mvc.EditingIdx))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/index/event.templ`, Line: 40, Col: 37}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</h1><div style=\" display: grid;\n\t\t\t\t\tgrid-template-columns: repeat(auto-fit,minmax(350px, 350px));\n\t\t\t\t\tgap: 1rem;\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, event := range events {
			templ_7745c5c3_Err = EditRow(event, mvc.EditingIdx).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</div><code><pre data-text=\"ctx.signals.JSON()\"></pre></code></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// templ TodoInput(i int) {
// 	<input
// 		id="todoInput"
// 		data-testid="todos_input"
// 		class="flex-1 w-full italic input input-bordered input-lg"
// 		placeholder="What needs to be done?"
// 		data-bind-input
// 		data-on-keydown={ fmt.Sprintf(`
// 			if (evt.key !== 'Enter' || !$input.trim().length) return;
// 			@put('/api/todos/%d/edit');
// 			$input = '';
// 		`, i ) }
// 		if i >= 0 {
// 			data-on-click__outside="@put('/api/todos/cancel')"
// 		}
// 	/>
// }

//	templ TodoRow(mode EventViewMode, todo *Event, i int, isEditing bool) {
//		{{
//			indicatorID := fmt.Sprintf("indicator%d", i)
//			fetchingSignalName := fmt.Sprintf("fetching%d", i)
//		}}
//		if isEditing {
//			@TodoInput(i)
//		} else if (
//			mode == TodoViewModeAll) ||
//			(mode == TodoViewModeActive && !todo.Completed) ||
//			(mode == TodoViewModeCompleted && todo.Completed) {
//			<li class="flex items-center gap-8 p-2 group" id={ fmt.Sprintf("todo%d", i) }>
//				<label
//					id={ fmt.Sprintf("toggle%d", i) }
//					class="text-4xl cursor-pointer"
//					data-on-click={ fmt.Sprintf("@post('/api/todos/%d/toggle')", i) }
//					data-indicator={ fetchingSignalName }
//				>
//					if todo.Completed {
//						@components.Icon("material-symbols:check-box-outline")
//					} else {
//						@components.Icon("material-symbols:check-box-outline-blank")
//					}
//				</label>
//				<label
//					id={ indicatorID }
//					class="flex-1 text-lg cursor-pointer select-none"
//					data-on-click={ fmt.Sprintf("@get('/api/todos/%d/edit')", i) }
//					data-indicator={ fetchingSignalName }
//				>
//					{ todo.Text }
//				</label>
//				@components.SseIndicator(fetchingSignalName)
//				<button
//					id={ fmt.Sprintf("delete%d", i) }
//					class="invisible btn btn-error group-hover:visible"
//					data-on-click={ fmt.Sprintf("@delete('/api/todos/%d')", i) }
//					data-testid={ fmt.Sprintf("delete_todo%d", i) }
//					data-indicator={ fetchingSignalName }
//					data-attrs-disabled={ fetchingSignalName + "" }
//				>
//					@components.Icon("material-symbols:close")
//				</button>
//			</li>
//		}
//	}
func EditRow(event models.Event, editingIdx int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		eventEdit := models.EditEvent{
			ID:               event.ID,
			Title:            event.Name,
			GameMaster:       "System",
			System:           "Game Master",
			ShortDescription: event.Description,
		}
		if editingIdx == int(event.ID) {
			templ_7745c5c3_Err = components.EditEvent(eventEdit).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = root.EventCard(event, "System", "Game Master").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
